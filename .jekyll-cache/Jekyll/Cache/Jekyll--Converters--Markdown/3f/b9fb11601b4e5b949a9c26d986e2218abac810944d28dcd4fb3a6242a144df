I"‚#<p>Over the weekend I attempted to read a paper by Matt Might called
<a href="http://matt.might.net/papers/might2007lfa.pdf">Logic Flow Analysis</a>. Logic
Flow Analysis promises to marry constraint solvers and abstract
interpretation so that they play off each other to produce better
analysis results. Unfortunately, I fell somewhat flat on this, as the
amount of technical detail in the paper is fairly overwhelming. So,
instead, I switched to a simplified version of the paper Matt
recommended I read instead: <a href="http://matt.might.net/papers/might2010shape.pdf">‚ÄúShape Analysis in the Absence of Pointers
and Structure‚Äù</a>. The
paper describes an important problem in program analysis I hadn‚Äôt
realized before, and manages to do so in a fairly approachable manner
(meaning people like myself can read it). Or at least, as approachable
as a paper can be whilst still including lines like the following:</p>

<blockquote>
  <p>Under anodization, bindings are not golden, but may be temporarily
gold-plated.</p>
</blockquote>

<p>Keep in mind, this is a (nominally, at least) a paper on programming
language theory, and not battery design.</p>

<h1 id="whats-the-paper-about">What‚Äôs the paper about?</h1>

<p>The paper is about showing that control flow analyses for functional
languages are insufficient to reason about properties we really might
want to know about because they neglect to take the structure of
environments into account. If you read traditional accounts of control
flow analysis, you‚Äôll see things like ‚Äúfunction f flows to label 2‚Äù
and the like. One key point that Matt makes is that talking about
functions is insufficient, because it neglects to account for the fact
that it is <em>closures</em>, and not simply functions, that account for the
runtime behavior of the program. Control flow analysis is really good
about reasoning about how <em>functions</em> flow through programs, but
talking about environments is a separate issue.</p>

<p>As always, let‚Äôs start with an example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(let ((f (lambda (x h)
  (if x
    (h)                ; Line 3
    (lambda () x)))))
  (f #t (f #f nil)))
</code></pre></div></div>

<p>Let‚Äôs say that we want to optimize the program. We‚Äôre going to do it
as follows: we‚Äôre going to run a CFA and, if we see that there‚Äôs only
one possible callee for a given call site (like <code class="language-plaintext highlighter-rouge">h</code> in line 3), we‚Äôll
replace it by the actual function that‚Äôs called. We run CFA and
compute the set of functions that reach that point. What functions can
<code class="language-plaintext highlighter-rouge">h</code> be? <code class="language-plaintext highlighter-rouge">f</code> is called once with <code class="language-plaintext highlighter-rouge">nil</code>, so <code class="language-plaintext highlighter-rouge">h</code> could be <code class="language-plaintext highlighter-rouge">nil</code>, and then
<code class="language-plaintext highlighter-rouge">f</code> is called with the result of <code class="language-plaintext highlighter-rouge">(f #f nil)</code>, which is <code class="language-plaintext highlighter-rouge">(lambda ()
x)</code>. So if <code class="language-plaintext highlighter-rouge">h</code> is invoked, it will only ever be <code class="language-plaintext highlighter-rouge">(lambda () x)</code>,
meaning that we could inline that function in place of <code class="language-plaintext highlighter-rouge">h</code> in line 3.</p>

<p>The problem is that doing this changes the meaning of the program:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(let ((f (lambda (x h)
  (if x
    (lambda () x)
    (lambda () x)))))
  (f #t (f #f nil)))
 --&gt; #t
</code></pre></div></div>

<p>The problem with the previous line of thought is that we didn‚Äôt take
into account that the <em>first</em> invocation of <code class="language-plaintext highlighter-rouge">f</code> produces the closure
<code class="language-plaintext highlighter-rouge">&lt;(lambda () x), {x |-&gt; #f}&gt;</code>, which is then subsequently fed in for
<code class="language-plaintext highlighter-rouge">h</code> in the second use of <code class="language-plaintext highlighter-rouge">f</code>.  When executed, the closure looks up x
from its environment and gets the value <code class="language-plaintext highlighter-rouge">#f</code> out.</p>

<p>Control flow analyses don‚Äôt usually take the closure structure into
account. The paper makes the argument that we should think of this
so-called environment analysis as analogous to shape analysis.</p>

<h1 id="stating-the-problem">Stating the problem</h1>

<p>The paper defines the semantics of a CPS-style lambda calculus using a
variant of the standard
<a href="http://matt.might.net/articles/cesk-machines/">CESK</a> machine (leaving
off the K). The machine employs the standard
<a href="http://matt.might.net/papers/vanhorn2010abstract.pdf">AAM</a>
abstraction, indirecting values through the store: environments map
variables to addresses, and the store maps addresses to values.  AAM
also adds some auxiliary information (called the <em>time</em>) to help the
analysis designer control which things in the program get ‚Äúsmushed
together:‚Äù e.g., calls with the same calling context (up to some
finite bound that represents sensitivity).</p>

<p>Unfortunately, when you play this trick of finitizing the store to get
a decidable analysis, you <em>lose</em> the ability to reason about how many
things have been ‚Äúsmushed together.‚Äù</p>

<h1 id="solving-the-problem-abstract-counting">Solving the problem: abstract counting</h1>

<p>When we run our abstract interpretation, we end up with an abstract
environment <code class="language-plaintext highlighter-rouge">œÅ^ : Var ‚Üí Addr^</code>, that maps variables to <em>abstract</em>
addresses. The (abstract) store maps abstract addresses to abstract
values.  We want to determine, for <code class="language-plaintext highlighter-rouge">œÅ</code> and <code class="language-plaintext highlighter-rouge">œÅ'</code>, and some variable <code class="language-plaintext highlighter-rouge">x
‚àà dom(œÅ)</code>, if <code class="language-plaintext highlighter-rouge">œÉ(œÅ(x)) = œÉ(œÅ'(x))</code>. If we can successfully decide this
is true for all of the free variables (<code class="language-plaintext highlighter-rouge">x</code> in our example) in the term
(<code class="language-plaintext highlighter-rouge">(lambda () x)</code> in our example), then we can safely inline the
function. Unfortunately, in general, because <code class="language-plaintext highlighter-rouge">œÅ(x)</code> represents to a
<em>set</em> of concrete values, we would have to decide that <code class="language-plaintext highlighter-rouge">‚àÄ x, x'. x ‚àà X
= x' ‚àà X'</code>, where <code class="language-plaintext highlighter-rouge">X = Œ± (œÉ(œÅ(x)))</code>, the concretization of <code class="language-plaintext highlighter-rouge">œÉ(œÅ(x))</code>,
and <code class="language-plaintext highlighter-rouge">X' = Œ± (œÉ(œÅ'(x)))</code>. Obviously this is false when the cardinality
of <code class="language-plaintext highlighter-rouge">X</code> or <code class="language-plaintext highlighter-rouge">X'</code> is greater than one.</p>

<p>The key insight is that we instrument the analysis to keep track of
‚Äúhow many things have been smushed together‚Äù for a given location in
the store. In other words, we will add a bit of information to the
analysis to say that ‚Äì even though <code class="language-plaintext highlighter-rouge">|Œ±(œÉ(œÅ(x)))| &gt; 1</code> in general, we
really know that it actually represents <em>only one</em> concrete
instantiation. We can do this by keeping a separate map, called the
<code class="language-plaintext highlighter-rouge">count</code>, that tracks how many things have been merged into the heap at
a given point. When we put something into the abstract store, we also
record its <code class="language-plaintext highlighter-rouge">count</code> as <code class="language-plaintext highlighter-rouge">1</code>, when we merge another thing at that
location, we increment the count. It turns out that our argument
really only works for singletons, so in general it really only helps
to know that a location‚Äôs count is either one or greater than one.</p>

<p>This idea is what Matt calls abstract counting. In his paper he some
machinery to do what he calls <em>anodization</em> (remembering something has
a count of 1) and <em>deanodizing</em> (incrementing its count <em>past</em> one) a
value. I don‚Äôt think this is very intuitive to me: instead I think
it‚Äôs more clear to have an explicit count that tells us how many times
something has been abstracted.</p>

<p>This is a neat little trick that helps get past the problem: when
you‚Äôre dealing with functions involving free variables, it‚Äôs useful to
know how many different possible instances of things could be closed
over for a given variable. Knowing the answer seems generally useful
to designing analyses in the AAM style.</p>

:ET
I"-<p>You can also download this syllabus as a <a href="/assets/cybersec-syllabus.pdf">PDF</a>.</p>

<h2 id="computer-security-attacks-and-defenses">Computer Security: Attacks and Defenses</h2>
<p>(<em>CMSC 323</em> at Haverford)</p>

<p><strong>Prerequisites</strong>:</p>
<ul>
  <li>Experience in C programming:
    <ul>
      <li>E.g., CMSC245 at Haverford or CMSC246 at Bryn Mawr</li>
    </ul>
  </li>
  <li>Experience with or willingness to learn learn new languages (Python, SQL, JavaScript, etc..)</li>
</ul>

<p><strong>Workload</strong>:</p>
<ul>
  <li>3 lecture hours per week</li>
  <li>1 lab hour per week</li>
  <li>This will be a lab / project intensive class. Approximately 6-10
hours per week <em>outside</em> of class will be expected from
students. I recommend against taking this course concurrent with
other project-heavy courses.</li>
</ul>

<p><strong>Cap</strong>: 25 (may be lifted to 35)</p>

<h2 id="course-overview">Course Overview</h2>

<p>This​ ​course​ ​will​ ​serve​ ​as​ ​a​ ​broad​ ​introduction​ ​to​ ​the​ ​field​ ​of​
​computer​ ​security,​ ​from​ ​two concurrent​ ​perspectives:​ ​attacks​ ​on​
​systems,​ ​and​ ​defenses​ ​against​ ​those​ ​attacks.​ ​The​ ​goal​ ​of this​ ​course​
​will​ ​be​ ​to​ ​help​ ​build​ ​intuition​ ​so​ ​that–when​ ​designing​ ​your​ ​own​
​systems–you​ ​can intelligently​ ​assess​ ​and​ ​mitigate​ ​security​ ​risks.</p>

<p>To​ ​understand​ ​how​ ​attackers​ ​think,​ ​we​ ​will​ ​learn​ ​about​ ​the​ ​attacks​
​they​ ​employ.​ ​​ ​We​ ​will dissect​ ​a​ ​number​ ​of​ ​real-world​ ​attacks​ ​(such​ ​as​
​Heartbleed​ ​or​ ​WannaCry)​ ​and​ ​reflect​ ​upon​ ​what could​ ​have​ ​been​ ​done​ ​to​
​prevent​ ​them.​ ​But​ ​understanding​ ​a​ ​collection​ ​of​ ​attacks​ ​is​ ​not​ ​alone
sufficient​ ​for​ ​helping​ ​us​ ​understand​ ​how​ ​to​ ​build​ ​secure​ ​systems.​ ​So​
​alongside​ ​attacks,​ ​we​ ​will also​ ​learn​ ​the​ ​theoretical​ ​underpinnings​
​of​ ​security,​ ​and​ ​use​ ​it​ ​to​ ​build​ ​defenses​ ​into​ ​our systems.</p>

<p>Labs​ ​will​ ​transition​ ​theory​ ​into​ ​practice.​ ​We​ ​will​ ​conclude​ ​with​ ​a​
​group​ ​project​ ​exploring advanced​ ​topics​ ​relevant​ ​to​ ​the​ ​state​ ​of​ ​the​
​art​ ​in​ ​computer​ ​security.​ ​The​ ​course​ ​will​ ​begin​ ​with a​ ​discussion​ ​on​
​ethical​ ​application​ ​of​ ​techniques​ ​we​ ​learn.</p>

<h2 id="topics">Topics</h2>

<p>We​ ​will​ ​cover​ ​parts​ ​of​ ​the​ ​following​ ​topics,​ ​adjusted​ ​for​ ​time​ ​and​ ​pace​ ​of​ ​the​ ​course,​ ​along​ ​with
student​ ​interest​ ​in​ ​each​ ​area.</p>

<ul>
  <li>Low-level​ ​memory​ ​attacks​ ​and​ ​defenses
    <ul>
      <li>Buffer​ ​overflows</li>
      <li>Stack​ ​canaries</li>
      <li>Access​ ​space​ ​randomization​ ​/​ ​derandomization</li>
      <li>Return​ ​to​ ​libc​ ​/​ ​return-oriented-programming</li>
    </ul>
  </li>
  <li>Cryptography
    <ul>
      <li>Symmetric and asymmetric-key cryptography</li>
      <li>Certificates, CAs, and​ ​PKI</li>
      <li>SSL/TLS</li>
    </ul>
  </li>
  <li>Web security
    <ul>
      <li>SQL​ ​injections</li>
      <li>Cross-site​ ​scripting</li>
      <li>Cross-site​ ​request​ ​forgery</li>
    </ul>
  </li>
  <li>Social​ ​engineering​ ​and​ ​security​ ​ethics</li>
  <li>UI​ ​design​ ​for​ ​security
    <ul>
      <li>App​ ​permissions​ ​design</li>
      <li>Best​ ​practices​ ​for​ ​security​ ​UI</li>
      <li>Permission​ ​lifetime​ ​and​ ​revocation</li>
      <li>Case​ ​study​ ​in​ ​privacy​ ​controls:
        <ul>
          <li>Facebook​ ​privacy​ ​controls</li>
          <li>Android​ ​permissions</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Information​ ​flow​ ​control​ ​in​ ​web​ ​apps</li>
  <li>Reverse​ ​engineering</li>
  <li>Theoretical​ ​underpinnings​ ​of​ ​security
    <ul>
      <li>Full​ ​abstraction</li>
      <li>Information​ ​flow</li>
    </ul>
  </li>
</ul>

<h2 id="projects-and-labs">Projects and Labs</h2>

<p>Projects​ ​will​ ​be​ ​started​ ​in​ ​labs,​ ​and​ ​then​ ​continued​ ​individually.​
​Some​ ​labs​ ​are​ ​structured​ ​so​ ​that they​ ​begin​ ​with​ ​a​ ​concrete​
​assignment​ ​to​ ​work​ ​on​ ​as​ ​an​ ​individual​ ​in​ ​the​ ​first​ ​week,​ ​and​ ​then
move​ ​on​ ​to​ ​a​ ​group​ ​assignment​ ​to​ ​complete​ ​a​ ​larger​ ​task.</p>

<h4 id="project-1-memory-attacks-weeks-1-4-inclusive-uses-c-programming">Project 1: Memory attacks (Weeks 1-4 inclusive) (Uses C programming)</h4>

<p>This​ ​project​ ​will​ ​cover​ ​low-level​ ​memory​ ​attacks​ ​using​ ​the​ ​C​
​programming​ ​language.​ ​The students​ ​will​ ​begin​ ​by​ ​executing​ ​an​ ​attack​
​from​ ​starter​ ​code​ ​provided.​ ​They​ ​will​ ​then​ ​implement their​ ​own​ ​buffer​
​overflow​ ​attack,​ ​and​ ​demonstrate​ ​a​ ​way​ ​to​ ​prevent​ ​the​ ​attack​ ​by​
​intelligent programming,​ ​and​ ​also​ ​facilities​ ​provided​ ​by​ ​the​
​compiler.​ ​After​ ​completing​ ​this​ ​task,​ ​students will​ ​form​ ​groups​ ​to​
​complete​ ​a​ ​more​ ​advanced​ ​attack​ ​studying​ ​ASLR​ ​or​ ​ROP.​ ​1.5​ ​weeks​ ​will​
​be allocated​ ​for​ ​independent​ ​programming,​ ​and​ ​1.5​ ​weeks​ ​will​ ​be​
​allocated​ ​for​ ​group​ ​work.</p>

<h4 id="project-2-cryptography-weeks-4-7-incl-uses-python-programming">Project 2: Cryptography (weeks 4-7 incl.) (Uses Python programming)</h4>

<p>This​ ​project​ ​will​ ​involve​ ​creating​ ​a​ ​public​ ​/​ ​private​ ​key​ ​pair​ ​and​
​manually​ ​exchanging​ ​keys​ ​to collaborate​ ​secretly​ ​communicate​ ​with​
​group​ ​members.​ ​The​ ​next​ ​week,​ ​students​ ​will​ ​either implement​ ​a​ ​secure​
​chat​ ​using​ ​cryptographic​ ​primitives​ ​provided,​ ​or​ ​explore​ ​an​ ​attack​ ​on​
​an insecure​ ​cryptographic​ ​hash.</p>

<h4 id="project-3-web-security-weeks-7-9-incl-uses-python-programming">Project 3: Web security (weeks 7-9 incl.) (Uses Python programming)</h4>

<p>Students​ ​will​ ​be​ ​given​ ​an​ ​insecure​ ​web​ ​app​ ​written​ ​in​ ​Python​ ​which​ ​is​
​vulnerable​ ​to​ ​an​ ​SQL injection​ ​attack.​ ​They​ ​will​ ​then​ ​craft​ ​an​ ​input​
​which​ ​causes​ ​the​ ​app​ ​to​ ​leak​ ​secret​ ​information​ ​(in this​ ​case,​
​student​ ​grades​ ​from​ ​a​ ​synthetic​ ​gradebook​ ​consisting​ ​of​ ​fictitious​
​students).​ ​They​ ​will then​ ​fix​ ​this​ ​attack​ ​in​ ​the​ ​app.​ ​Finally,​
​students​ ​will​ ​attempt​ ​to​ ​break​ ​other​ ​students’​ ​fixes.</p>

<h4 id="final-project-weeks-10-14">Final project (weeks 10-14):</h4>

<p>This​ ​will​ ​be​ ​a​ ​final​ ​project,​ ​either​ ​in​ ​a​ ​group​ ​or​ ​alone.​ ​Students​ ​requesting​ ​to​ ​work​ ​alone​ ​need
prior​ ​approval​ ​for​ ​a​ ​topic​ ​and​ ​expectations​ ​will​ ​be​ ​calibrated​ ​accordingly.​ ​Students​ ​will​ ​select
one​ ​of​ ​the​ ​following​ ​projects,​ ​or​ ​propose​ ​their​ ​own​ ​project:</p>

<ul>
  <li>
    <p>Information flow specification (uses Python/Jeeves)</p>

    <p>Implement​ ​privacy​ ​policies​ ​for​ ​a​ ​secure​ ​student​ ​grades​ ​database​
​using​ ​Jeeves,​ ​an extension​ ​to​ ​the​ ​Python​ ​programming​ ​language.</p>
  </li>
  <li>
    <p>Designing a privacy UI (uses Python / Javascript / etc..)</p>

    <p>Use​ ​best​ ​practices​ ​to​ ​propose​ ​and​ ​implement​ ​a​ ​new​ ​UI​ ​for​ ​some​ ​privacy-related
mechanism,​ ​and​ ​perform​ ​a​ ​mock​ ​implementation.</p>
  </li>
  <li>
    <p>Malware reverse engineering</p>

    <p>Use​ ​reverse​ ​engineering​ ​tools​ ​to​ ​understand​ ​and​ ​discuss​ ​how​ ​a​
​particular​ ​piece​ ​of malware​ ​works.</p>
  </li>
  <li>
    <p>Implement signature-based antivirus</p>

    <p>Students​ ​will​ ​read​ ​about​ ​and​ ​implement​ ​a​ ​variant​ ​of​ ​signature-based​
​antivirus​ ​detection for​ ​a​ ​small​ ​sample​ ​of​ ​malware.</p>
  </li>
</ul>

<p>Students​ ​will​ ​check​ ​in​ ​with​ ​the​ ​professor​ ​regularly,​ ​and​
collaboration​ ​will​ ​occur​ ​via​ ​Github.</p>

<h2 id="grading">Grading</h2>

<ul>
  <li>Labs and projects: 50%
    <ul>
      <li>Individual component: 30%</li>
      <li>Group component: 20%</li>
    </ul>
  </li>
  <li>Two midterm exams: 30% (take home and open note)
    <ul>
      <li>Given 1/3rd and 2/3rd of the way through the course</li>
    </ul>
  </li>
  <li>Final project: 20%</li>
</ul>

<p>Evaluation​ ​for​ ​group​ ​projects​ ​will​ ​be​ ​based​ ​on​ ​mutual​ ​student​
feedback​ ​and​ ​oral​ ​exam​ ​with individual​ ​group​ ​members.</p>

<h2 id="books">Books</h2>

<p><strong>Required</strong></p>

<ul>
  <li><strong>Security Engineering, Second Editing</strong>, ​by ​Ross ​Anderson
    <ul>
      <li>This​ ​book​ ​is​ ​freely​ ​available​ ​online​ ​from​ ​the​ ​author</li>
    </ul>
  </li>
  <li>Online​ ​resources​ ​will​ ​be​ ​distributed​ ​throughout​ ​the​ ​course.​ ​These​
​include​ ​blog​ ​articles (e.g.,​ ​by​ ​the​ ​Facebook​ ​privacy​ ​group),​ ​academic​
​papers,​ ​and​ ​websites​ ​(e.g.,​ ​the​ ​Android security​ ​internals).​ ​These​
​will​ ​all​ ​be​ ​freely​ ​available.</li>
</ul>

<p><strong>Optional</strong></p>

<ul>
  <li><strong>The Web Application Hacker’s Handbook</strong>​,​ ​by​ ​Dafydd​ ​Stuttard​ ​&amp;​ ​Marcus​ ​Pinto</li>
  <li><strong>Applied Cryptography, Second Edition</strong>, by​ ​Bruce​ ​Schneier</li>
</ul>

:ET